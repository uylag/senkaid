[Directory]: include/senkaid/utils/config

[Purpose]:
This folder contains **low-level configuration helpers**, **compile-time flags**, and **conditional macros** used throughout the Senkaid codebase.

It provides:
- Unified mechanisms for feature toggles
- Cross-platform compatibility layers
- Clean separation of compile-time config logic from actual operations
- Standardized macros for toggling debug, assertions, and API visibility

---

[Expected files]:

- defines.hpp  
  - Central header for macros like:
    ```cpp
    #define SENKAID_INLINE inline __attribute__((always_inline))
    #define SENKAID_NO_INLINE __attribute__((noinline))
    #define SENKAID_UNUSED(x) (void)(x)
    #define SENKAID_LIKELY(x)   __builtin_expect(!!(x), 1)
    #define SENKAID_UNLIKELY(x) __builtin_expect(!!(x), 0)
    ```
  - These improve portability and performance tuning.

- compiler.hpp  
  - Detects compiler (GCC, Clang, MSVC) and versions:
    ```cpp
    #if defined(_MSC_VER)
    #define SENKAID_COMPILER_MSVC
    #elif defined(__clang__)
    #define SENKAID_COMPILER_CLANG
    #elif defined(__GNUC__)
    #define SENKAID_COMPILER_GCC
    #endif
    ```

- platform.hpp  
  - Detects OS and architecture:
    ```cpp
    #if defined(_WIN32)
    #define SENKAID_PLATFORM_WINDOWS
    #elif defined(__linux__)
    #define SENKAID_PLATFORM_LINUX
    #elif defined(__APPLE__)
    #define SENKAID_PLATFORM_MAC
    #endif
    ```

- export.hpp  
  - Handles symbol visibility for shared library builds:
    ```cpp
    #if defined(_WIN32)
      #define SENKAID_API __declspec(dllexport)
    #else
      #define SENKAID_API __attribute__((visibility("default")))
    #endif
    ```

- version.hpp  
  - Defines library version (e.g. via CMake-generated macros):
    ```cpp
    #define SENKAID_VERSION_MAJOR 0
    #define SENKAID_VERSION_MINOR 1
    #define SENKAID_VERSION_PATCH 0
    ```

- debug.hpp  
  - Debug/Assert utilities:
    ```cpp
    #define SENKAID_ASSERT(x) assert(x)
    #define SENKAID_DEBUG_ONLY(x) x
    ```

---

[Optional files]:

- config_selector.hpp  
  - Auto-configures features depending on backend/platform:
    ```cpp
    #if defined(SENKAID_USE_CUDA)
      #include <senkaid/backend/cuda/cuda_backend.hpp>
    #endif
    ```

- config_macros.hpp  
  - Definitions for tuning at build time (SIMD width, threading, etc).

---

[Integration]:

- Used by nearly every translation unit
- Included in `matrix.hpp`, `backend/*`, `ops/*`
- Informs all other config folders (`config/flags`, `config/dispatch`, etc.)

---

[Notes]:

- This folder **does not contain logic** â€” only macros and conditional compilation helpers.
- Helps keep headers clean, allows for central control of tuning knobs.

---

[Future]:

- Migrate to C++20 `[[attributes]]` where possible
- Autogenerate parts via `configure`/CMake scripts
- Introduce compile-time warnings/errors for misconfigurations

