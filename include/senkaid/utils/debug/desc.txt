[Directory]: include/senkaid/utils/debug

[Purpose]:
This folder provides internal **debugging infrastructure** for Senkaid — runtime assertions, logging, error tracing, memory check tools — that are active during development or debugging builds.

Main goals:
- Centralize all debugging and assertion logic
- Provide custom error messages with source info
- Enable internal tracing without polluting production code
- Support toggling debug-only behavior via macros or build flags

---

[Expected files]:

- debug_tools.hpp  
  - Core debugging utilities and macros:
    ```cpp
    #define SENKAID_ASSERT(expr) \
      ((expr) ? (void)0 : senkaid::debug::assert_fail(#expr, __FILE__, __LINE__, __func__))

    #define SENKAID_TRACE(msg) \
      senkaid::debug::trace(msg, __FILE__, __LINE__, __func__)
    ```

- debug_flags.hpp  
  - Compile-time switches and runtime flags for enabling/disabling checks:
    ```cpp
    #define SENKAID_ENABLE_ASSERTIONS
    #define SENKAID_ENABLE_TRACE_LOGGING
    ```

- logger.hpp  
  - Basic logging utility (can be replaced later with spdlog etc.):
    ```cpp
    void log(const std::string& message, const char* file, int line, const char* func);
    ```

- assert.hpp  
  - Custom assert handlers:
    ```cpp
    void assert_fail(const char* expr, const char* file, int line, const char* func);
    ```

- trace.hpp  
  - Functions to emit trace output during critical operations:
    ```cpp
    void trace(const std::string& msg, const char* file, int line, const char* func);
    ```

- memory_guard.hpp  
  - Guards to detect buffer overflows / memory misuse (e.g., with sentinels or red zones during debug builds).

---

[Optional files]:

- debug_config.hpp  
  - Central debug config values (log levels, output targets, etc.).

- debug_dump.hpp  
  - Dumps tensor/matrix/vector contents to file/console for inspection:
    ```cpp
    senkaid::debug::dump_matrix(matrix, "Before Transpose");
    ```

---

[Integration]:

- Internally used across `core/`, `ops/`, and `backend/`
- Enabled only in debug builds (`-DSENKAID_DEBUG` or CMake `BUILD_DEBUG=ON`)
- Disabled completely in release builds via `#ifdef`

---

[Notes]:

- No STL output in core library — logs go to `stderr` or file in dev mode
- Allows *zero-overhead* in production builds due to macro guards

---

[Future]:

- Optional integration with external profilers (Intel VTune, Perfetto)
- Support structured debug output (JSON trace dumps)
- Extend with performance timing (for `ops/*` hot loops)


