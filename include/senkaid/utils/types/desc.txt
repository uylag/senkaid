[Directory]: include/senkaid/utils/types

[Purpose]:
This folder defines **fundamental type-level utilities and aliases** used across the library â€” both for simplifying template code and enforcing compile-time constraints.

It plays a foundational role in enabling type traits, overload resolution, concept checks, and platform consistency.

---

[Expected files]:

- type_aliases.hpp  
  - Common aliases and platform-wide types:
    ```cpp
    using index_t = std::int64_t;
    using size_t = std::size_t;
    using float32 = float;
    using float64 = double;
    ```

- type_traits.hpp  
  - Compile-time introspection helpers (if not in `traits/`):
    ```cpp
    template <typename T>
    inline constexpr bool is_matrix_v = /* ... */;
    ```

- type_utils.hpp  
  - SFINAE helpers, tag dispatching, enable_if wrappers:
    ```cpp
    struct tag_cpu {};
    struct tag_gpu {};
    
    template<bool B, typename T = void>
    using enable_if_t = typename std::enable_if<B, T>::type;
    ```

- platform_types.hpp  
  - Resolves platform-specific types, alignment, byte size, endianness if needed.

---

[Optional files]:

- type_concepts.hpp  
  - C++20 concepts for matrix-like types, broadcastability, arithmetic compatibility.
- type_registry.hpp  
  - Central registration for serialization, dynamic dispatch, etc.

---

[Integration]:

- Used in:
  - `core/*` and `ops/*` for type-based dispatch
  - `traits/` and `backend/` for compile-time branching
  - `io/`, `engine/`, `views/` for interface consistency

---

[Notes]:

- Critical for **reducing boilerplate** in templates
- Keeps platform type sizes and conventions **centralized**
- May eventually be merged partially with `traits/meta/`

---

[Future]:

- Concepts-based refinement (`requires` clauses)
- Add support for signed/unsigned detection, common type deduction
- Possibly migrate some aliases to `std::pmr` and `std::ranges`-compatible layouts

