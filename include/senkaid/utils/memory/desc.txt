[Directory]: include/senkaid/utils/memory

[Purpose]:
This folder provides **low-level memory management utilities**, including allocators, alignment helpers, buffer tracking, and memory safety abstractions.

It exists to support both performance-critical components (like SIMD or GPU buffers) and general-purpose matrix/tensor allocations while abstracting platform differences.

---

[Expected files]:

- memory_utils.hpp  
  - Common helpers for pointer alignment, size rounding, raw buffer access:
    ```cpp
    void* aligned_malloc(std::size_t size, std::size_t align);
    void aligned_free(void* ptr);
    std::size_t round_up(std::size_t size, std::size_t align);
    ```

- memory_guard.hpp  
  - Optional bounds-checking and canary-based memory wrappers for debugging:
    ```cpp
    template<typename T>
    class GuardedPointer {
      // Injects guards around allocation
    };
    ```

- memory_pool.hpp  
  - Lightweight memory pool with slab/chunk allocation for small/frequent objects:
    ```cpp
    class MemoryPool {
      void* allocate(std::size_t size);
      void deallocate(void* ptr);
    };
    ```

- memory_arena.hpp  
  - Arena-style allocator for fast linear allocation (e.g., scratch buffers):
    ```cpp
    class ArenaAllocator {
      void* allocate(std::size_t size);
      void reset(); // Resets whole arena
    };
    ```

- memory_tracker.hpp  
  - Optional runtime memory tracker, mostly for debugging and profiling:
    ```cpp
    struct AllocationInfo {
      void* ptr;
      std::size_t size;
      const char* source;
    };
    ```

---

[Optional files]:

- memory_fallback.hpp  
  - Safe fallback implementations for platforms without aligned_alloc/memalign
- memory_debug.hpp  
  - Redzones, double-free detection, leak logging (possibly activated via macro)

---

[Integration]:

- Used in:
  - `core/allocator` to provide backend memory tools
  - `backend/simd` and `backend/cuda/rocm` for aligned buffer handling
  - `engine/` and `ops/` to get fast temporary workspace
- Exposes portable API that may redirect to `malloc`, `new`, `cudaMalloc`, or HIP

---

[Notes]:

- Should allow both compile-time and runtime selection of allocation strategy
- Focus is on **performance, safety, and portability**
- Can be extended later with `std::pmr`-style interfaces or polymorphic allocators

---

[Future]:

- Add memory diagnostics (peak usage, fragmentation)
- Interface with GPU memory manager (`cudaMallocManaged`, ROCm memory pools)
- Tie into profiling tools for performance heatmaps

