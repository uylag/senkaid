[Directory]: include/senkaid/io/serialize

[Purpose]:
This folder provides tools for **binary serialization and deserialization** of senkaidâ€™s core data structures (e.g., Matrix, Vector, Tensor, etc.), optimized for **speed, space-efficiency, and portability**.

The goal is to allow:
- Fast saving/loading of trained models or datasets
- Persistence of computational state between runs
- Export to disk or stream over network with minimal overhead

[Expected files]:

- serialize.hpp  
  - Main user-facing interface:
    ```cpp
    serialize::save("file.dat", matrix);
    auto mat = serialize::load<Matrix<float>>("file.dat");
    ```
  - Dispatches to appropriate backend based on type and format

- serializer_base.hpp  
  - Abstract interfaces for serializers:
    ```cpp
    struct ISerializer {
      virtual void write(const void* data, size_t size) = 0;
      virtual void read(void* data, size_t size) = 0;
    };
    ```

- binary_serializer.hpp  
  - Default binary format implementation (e.g., header + raw memory dump).
  - Versioning, type ID, endian checks included in header.

- file_backend.hpp  
  - Manages file reading/writing for serialization (e.g., `std::ifstream`, `std::ofstream`).
  - Supports buffered I/O, safety checks, fallback paths.

[Optional files]:

- stream_serializer.hpp  
  - Allows (de)serialization to/from any stream (`std::ostream`, `std::stringstream`, sockets).
  - Useful for IPC or model deployment.

- json_serializer.hpp  
  - Human-readable alternative using JSON (e.g., for configs, debug).

- serializer_traits.hpp  
  - Static info for supported types:
    ```cpp
    template<typename T>
    struct is_serializable;
    ```

- compression.hpp  
  - Optional support for LZ4, Zstd, or gzip compression of payload.

[Integration]:

- Used in `engine/train`, `examples/ml`, `tests/benchmark`.
- Can serialize entire models (weights + topology + optimizer state).
- Also supports cache mechanisms in future (e.g., warm-starting solvers).

[Design Notes]:

- Avoid `reinterpret_cast` when serializing across platforms.
- Include metadata headers (version, shape, dtype, alignment) for robustness.
- Check for file truncation and integrity (e.g., CRC or magic numbers).

[Future]:

- Support for zero-copy memory-mapped files.
- Secure serialization (encryption, access control).
- Schema reflection for automatic deserialization into custom types.

